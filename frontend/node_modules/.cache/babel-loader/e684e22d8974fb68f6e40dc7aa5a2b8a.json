{"ast":null,"code":"import { animateCSSModeScroll } from '../../shared/utils.js';\nexport default function translateTo() {\n  let translate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.params.speed;\n  let runCallbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let translateBounds = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  let internal = arguments.length > 4 ? arguments[4] : undefined;\n  const swiper = this;\n  const {\n    params,\n    wrapperEl\n  } = swiper;\n\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n\n  const minTranslate = swiper.minTranslate();\n  const maxTranslate = swiper.maxTranslate();\n  let newTranslate;\n  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate; // Update progress\n\n  swiper.updateProgress(newTranslate);\n\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n\n    if (speed === 0) {\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: -newTranslate,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: -newTranslate,\n        behavior: 'smooth'\n      });\n    }\n\n    return true;\n  }\n\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(newTranslate);\n\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionEnd');\n    }\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(newTranslate);\n\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionStart');\n    }\n\n    if (!swiper.animating) {\n      swiper.animating = true;\n\n      if (!swiper.onTranslateToWrapperTransitionEnd) {\n        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n          if (!swiper || swiper.destroyed) return;\n          if (e.target !== this) return;\n          swiper.wrapperEl.removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.onTranslateToWrapperTransitionEnd = null;\n          delete swiper.onTranslateToWrapperTransitionEnd;\n\n          if (runCallbacks) {\n            swiper.emit('transitionEnd');\n          }\n        };\n      }\n\n      swiper.wrapperEl.addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Santushti/Desktop/santushti/Shop-Ease/node_modules/swiper/core/translate/translateTo.js"],"names":["animateCSSModeScroll","translateTo","translate","speed","params","runCallbacks","translateBounds","internal","swiper","wrapperEl","animating","preventInteractionOnTransition","minTranslate","maxTranslate","newTranslate","updateProgress","cssMode","isH","isHorizontal","support","smoothScroll","targetPosition","side","scrollTo","behavior","setTransition","setTranslate","emit","onTranslateToWrapperTransitionEnd","transitionEnd","e","destroyed","target","removeEventListener","addEventListener"],"mappings":"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","sourcesContent":["import { animateCSSModeScroll } from '../../shared/utils.js';\nexport default function translateTo(translate = 0, speed = this.params.speed, runCallbacks = true, translateBounds = true, internal) {\n  const swiper = this;\n  const {\n    params,\n    wrapperEl\n  } = swiper;\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n  const minTranslate = swiper.minTranslate();\n  const maxTranslate = swiper.maxTranslate();\n  let newTranslate;\n  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate;\n\n  // Update progress\n  swiper.updateProgress(newTranslate);\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    if (speed === 0) {\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: -newTranslate,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: -newTranslate,\n        behavior: 'smooth'\n      });\n    }\n    return true;\n  }\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(newTranslate);\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionEnd');\n    }\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(newTranslate);\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionStart');\n    }\n    if (!swiper.animating) {\n      swiper.animating = true;\n      if (!swiper.onTranslateToWrapperTransitionEnd) {\n        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n          if (!swiper || swiper.destroyed) return;\n          if (e.target !== this) return;\n          swiper.wrapperEl.removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.onTranslateToWrapperTransitionEnd = null;\n          delete swiper.onTranslateToWrapperTransitionEnd;\n          if (runCallbacks) {\n            swiper.emit('transitionEnd');\n          }\n        };\n      }\n      swiper.wrapperEl.addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n    }\n  }\n  return true;\n}"]},"metadata":{},"sourceType":"module"}