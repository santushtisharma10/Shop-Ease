{"ast":null,"code":"export default function Grid(_ref) {\n  let {\n    swiper,\n    extendParams\n  } = _ref;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    slidesPerRow = slidesNumberEvenToRows / rows;\n    numFullColumns = Math.floor(slidesLength / rows);\n\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n  };\n\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup,\n      spaceBetween\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid; // Set slides order\n\n    let newSlideOrderIndex;\n    let column;\n    let row;\n\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n\n    slide.style[getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n  };\n\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      spaceBetween,\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.wrapperEl.style[getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}","map":{"version":3,"sources":["C:/Users/Santushti/Desktop/santushti/Shop-Ease/node_modules/swiper/modules/grid/grid.js"],"names":["Grid","swiper","extendParams","grid","rows","fill","slidesNumberEvenToRows","slidesPerRow","numFullColumns","initSlides","slidesLength","slidesPerView","params","Math","floor","ceil","max","updateSlide","i","slide","getDirectionLabel","slidesPerGroup","spaceBetween","newSlideOrderIndex","column","row","groupIndex","slideIndexInGroup","columnsInGroup","min","style","order","updateWrapperSize","slideSize","snapGrid","centeredSlides","roundLengths","virtualSize","wrapperEl","newSlidesGrid","length","slidesGridItem","push","splice"],"mappings":"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","sourcesContent":["export default function Grid({\n  swiper,\n  extendParams\n}) {\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    slidesPerRow = slidesNumberEvenToRows / rows;\n    numFullColumns = Math.floor(slidesLength / rows);\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n  };\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup,\n      spaceBetween\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    // Set slides order\n    let newSlideOrderIndex;\n    let column;\n    let row;\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n    slide.style[getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n  };\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      spaceBetween,\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.wrapperEl.style[getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}"]},"metadata":{},"sourceType":"module"}